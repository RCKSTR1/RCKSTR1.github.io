I"q<div class="post-content">
    <iframe allow="encrypted-media" allowtransparency="true" class="image left" frameborder="0" height="300" src="https://open.spotify.com/embed/playlist/6JlXlJUeZLb5POl5RzMWM9" width="300"></iframe>
    <h2>Introducci√≥n</h2>

    <p>
        En el post de hoy haremos una nueva actualizaci√≥n a la aplicaci√≥n GLTrack, que hemos venido construyendo y que tiene como objetivo servir para registrar y monitorear un registro personal de niveles de az√∫car en la sangre para pacientes de diabetes.
    </p>

    <p>
        Me han comentado que los posts anteriores pueden ser demasiado largos y no tan f√°ciles de entender. Voy a tratar de mantener los posts m√°s breves y al mismo tiempo explicarlos mejor. Aunque creo que este post tampoco qued√≥ tan corto, espero que si est√© m√°s claro.
    </p>

    <blockquote>
        Esta es la tercera parte de la serie de posts acerca de la aplicaci√≥n GLTrack. Puedes revisar los posts anteriores en los siguientes links:
        <ol>
            <li>
                <i>
                    <a href="/2019/06/18/GLTrack1.html" target="_blank">
                        GLTrack parte 1: "Schematics, Componentes y Ruteo con Angular + Material".
                    </a>
                </i>
            </li>
            <li>
                <i>
                    <a href="/2019/08/07/GLTrack2.html" target="_blank">
                        GLTrack parte 2: "Modelos, servicios, dependency injection, formas y data binding con Angular + Material.".
                    </a>
                </i>
            </li>
        </ol>
    </blockquote>

    <p>
        En el post anterior, creamos un formulario para registrar mediciones e implementamos una tabla para mostrar las capturas.
    </p>
    <p>
        Imagina que GLTrack ya est√° siendo usado por un usuario final, Diana. Diana entra a la aplicaci√≥n y registra sus niveles de glucosa. Las mediciones se muestran en la tabla en la p√°gina de registro. Pero la aplicaci√≥n ser√≠a mucho m√°s √∫til para Diana si le mostrara sus datos de una manera m√°s √∫til.
    </p>
    <p>
        Hoy comenzaremos a modificar el Dashboard, la p√°gina principal de la aplicaci√≥n. Lo primero que haremos es agregar al dashboard una tabla igual a la que tenemos en la p√°gina de registro.
    </p>


    <h2>Paso 1: Crear nuevo componente</h2>
    <p>
        La manera incorrecta de agregar la tabla de registro a la p√°gina principal ser√≠a copiar el c√≥digo de la tabla de la p√°gina de registro y pegarlo en el componente Dashboard. En cambio, lo que vamos a hacer es crear un componente reutilizable que podamos utilizar en la p√°gina de registro y en el dashboard sin tener c√≥digo duplicado en la aplicaci√≥n.
    </p>

    <div class="row">
        <div class="6u 12u$(small)">
            <p>
                Comenzaremos creando un componente nuevo desde la consola:
            </p>
        </div>
        <div class="6u 12u$(small)">
            <pre><code>ng generate component components/tabla-registros</code></pre>
        </div>
    </div>


    <p>
        Ahora, inserta el nuevo componente en la p√°gina de registro:
    </p>


    <div class="row">
        <div class="6u 12u$(small)">
            <pre><code>
&lt;h1&gt;Niveles de glucosa&lt;/h1&gt;
&lt;mat&#45;card&gt;
    ...
&lt;/mat&#45;card&gt;

&lt;mat&#45;card&gt;
    &lt;mat&#45;card&#45;title&gt;Mis registros&lt;/mat&#45;card&#45;title&gt;
    
    &lt;app&#45;tabla&#45;registros&gt;&lt;/app&#45;tabla&#45;registros&gt;
    ...
&lt;/mat&#45;card&gt;</code></pre>
        </div>
        <div class="6u 12u$(small)">
            <span class="image fit">
                <a href="/assets/images/blog/GLTrack3/01-NuevoComponent.png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/01-NuevoComponent.png" /></a>
            </span>
        </div>
    </div>

    <h2>Paso 2: Mover y adecuar el c√≥digo de la tabla en el nuevo componente</h2>
    <h3>C√≥digo HTML</h3>
    <p>
        Comenzamos moviendo el c√≥digo HTML de la tabla desde "registro.component.html" hacia "tabla-registros.component.html".
    </p>
    <p>
        registro.component.html:
    </p>

    <pre><code>&lt;h1&gt;Niveles de glucosa&lt;/h1&gt;
&lt;mat&#45;card&gt;
    ...
&lt;/mat&#45;card&gt;

&lt;mat&#45;card&gt;
    &lt;mat&#45;card&#45;title&gt;Mis registros&lt;/mat&#45;card&#45;title&gt;

    &lt;app&#45;tabla&#45;registros&gt;&lt;/app&#45;tabla&#45;registros&gt;

    &lt;!&#45; El codigo estaba aqui &#45;&gt;
&lt;/mat&#45;card&gt;
</code></pre>
    <p>
        tabla-registros.component.html:
    </p>
    <pre><code>&lt;div class="row"&gt;
    &lt;mat&#45;form&#45;field class="row&#45;item grow"&gt;
        &lt;input matInput (keyup)="applyFilter(&#36;event.target.value)" placeholder="Buscar"&gt;
    &lt;/mat&#45;form&#45;field&gt;
&lt;/div&gt;

&lt;table mat&#45;table &#91;dataSource&#93;="dataSource" matSort&gt;
    &lt;ng&#45;container matColumnDef="fecha"&gt;
        &lt;th mat&#45;header&#45;cell *matHeaderCellDef mat&#45;sort&#45;header&gt; Fecha &lt;/th&gt;
        &lt;td mat&#45;cell *matCellDef="let row"&gt; &#123;row.Fecha|date:'medium'&#125; &lt;/td&gt;
    &lt;/ng&#45;container&gt;

    &lt;ng&#45;container matColumnDef="nivel"&gt;
        &lt;th mat&#45;header&#45;cell *matHeaderCellDef mat&#45;sort&#45;header&gt; ID &lt;/th&gt;
        &lt;td mat&#45;cell *matCellDef="let row"&gt; &#123;row.Nivel&#125; &lt;/td&gt;
    &lt;/ng&#45;container&gt;

    &lt;ng&#45;container matColumnDef="comida"&gt;
        &lt;th mat&#45;header&#45;cell *matHeaderCellDef mat&#45;sort&#45;header&gt; Comida &lt;/th&gt;
        &lt;td mat&#45;cell *matCellDef="let row"&gt; &#123;row.Comida&#125; &lt;/td&gt;
    &lt;/ng&#45;container&gt;

    &lt;ng&#45;container matColumnDef="antesDespues"&gt;
        &lt;th mat&#45;header&#45;cell *matHeaderCellDef mat&#45;sort&#45;header&gt; Antes/Despu√©s &lt;/th&gt;
        &lt;td mat&#45;cell *matCellDef="let row"&gt; &#123;row.AntesDespues&#125; &lt;/td&gt;
    &lt;/ng&#45;container&gt;

    &lt;ng&#45;container matColumnDef="actions"&gt;
        &lt;th mat&#45;header&#45;cell *matHeaderCellDef&gt; &lt;/th&gt;
        &lt;td mat&#45;cell *matCellDef="let row"&gt;
            &lt;button mat&#45;icon&#45;button (click)="Eliminar(row.Id)"&gt;
                &lt;mat&#45;icon&gt;delete&lt;/mat&#45;icon&gt;
            &lt;/button&gt;
        &lt;/td&gt;
    &lt;/ng&#45;container&gt;

    &lt;tr mat&#45;header&#45;row *matHeaderRowDef="displayedColumns"&gt;&lt;/tr&gt;
    &lt;tr mat&#45;row *matRowDef="let row; columns: displayedColumns;"&gt;&lt;/tr&gt;
&lt;/table&gt;
&lt;mat&#45;paginator &#91;pageSizeOptions&#93;="&#91;5, 10, 25, 100&#93;"&gt;&lt;/mat&#45;paginator&gt;
</code></pre>

    <h3>C√≥digo Typescript</h3>

    <p>
        Ahora continuamos moviendo el c√≥digo de la tabla desde el archivo registro.component.ts hacia tabla-registros.component.ts. Para m√°s claridad, a continuaci√≥n, se muestra el c√≥digo comentado en registro.component.ts:
    </p>

    <pre><code>import &#123; Component, OnInit, ViewChild &#125; from '@angular/core';
import &#123; MatTableDataSource, MatPaginator, MatSort &#125; from '@angular/material';
import &#123; MedicionGlucosa &#125; from 'src/app/models/models';
import &#123; MedicionesService &#125; from 'src/app/services/mediciones.service';

@Component(&#123;
    selector: 'app&#45;registro',
    templateUrl: './registro.component.html',
    styleUrls: &#91;'./registro.component.css'&#93;
&#125;)
export class RegistroComponent implements OnInit &#123;
    registros = &#91;&#93; as MedicionGlucosa&#91;&#93;;
    nuevoRegistro = &#123;&#125; as MedicionGlucosa;

    // displayedColumns: string&#91;&#93; = &#91;'fecha', 'nivel', 'comida', 'antesDespues', 'actions'&#93;;
    // dataSource: MatTableDataSource&lt;MedicionGlucosa&gt;;

    // @ViewChild(MatPaginator, &#123; static: true &#125;) paginator: MatPaginator;
    // @ViewChild(MatSort, &#123; static: true &#125;) sort: MatSort;

    constructor(private mediciones: MedicionesService) &#123;
    &#125;

    ngOnInit() &#123;
        this.registros = this.mediciones.GetAll();
        // this.dataSource = new MatTableDataSource(this.registros);
        // this.dataSource.paginator = this.paginator;
        // this.dataSource.sort = this.sort;
    &#125;

    Guardar() &#123;
        if (!this.IsInvalid()) &#123;
            this.mediciones.Create(this.nuevoRegistro);
            this.LimpiarForma();
            this.registros = this.mediciones.GetAll();
            // this.dataSource.data = this.registros;
        &#125;
    &#125;

    Eliminar(id: string) &#123;
        this.mediciones.Delete(id);
        this.registros = this.mediciones.GetAll();
        // this.dataSource.data = this.registros;
    &#125;

    LimpiarForma() &#123;
        this.nuevoRegistro = &#123;&#125; as MedicionGlucosa;
    &#125;

    IsInvalid() &#123;
    return this.nuevoRegistro.Nivel === undefined
        || this.nuevoRegistro.Comida === undefined
        || this.nuevoRegistro.AntesDespues === undefined
        || this.nuevoRegistro.Comida === undefined
        || this.nuevoRegistro.Fecha === undefined;
    &#125;

    // applyFilter(filterValue: string) &#123;
        // this.dataSource.filter = filterValue.trim().toLowerCase();

        // if (this.dataSource.paginator) &#123;
            // this.dataSource.paginator.firstPage();
        // &#125;
    // &#125;
&#125;
</code></pre>

    <p>
        Puedes eliminar las l√≠neas comentadas una vez que las pegas en "tabla-registros.component.ts":
    </p>

    <pre><code>import &#123; Component, OnInit, ViewChild &#125; from '@angular/core';
import &#123; MedicionGlucosa &#125; from 'src/app/models/models';
import &#123; MatTableDataSource, MatPaginator, MatSort &#125; from '@angular/material';

@Component(&#123;
    selector: 'app&#45;tabla&#45;registros',
    templateUrl: './tabla&#45;registros.component.html',
    styleUrls: &#91;'./tabla&#45;registros.component.css'&#93;
&#125;)
export class TablaRegistrosComponent implements OnInit &#123;
    registros = &#91;&#93; as MedicionGlucosa&#91;&#93;;
    displayedColumns: string&#91;&#93; = &#91;'fecha', 'nivel', 'comida', 'antesDespues', 'actions'&#93;;
    dataSource: MatTableDataSource&lt;MedicionGlucosa&gt;;

    @ViewChild(MatPaginator, &#123; static: true &#125;) paginator: MatPaginator;
    @ViewChild(MatSort, &#123; static: true &#125;) sort: MatSort;

    constructor() &#123;
        this.dataSource = new MatTableDataSource(this.registros);
        this.dataSource.paginator = this.paginator;
        this.dataSource.sort = this.sort;
    &#125;

    ngOnInit() &#123;
    &#125;

    applyFilter(filterValue: string) &#123;
        this.dataSource.filter = filterValue.trim().toLowerCase();
        if (this.dataSource.paginator) &#123;
            this.dataSource.paginator.firstPage();
        &#125;
    &#125;
&#125;
</code></pre>

    <p>
        Ahora el componente ‚Äútabla-registros.component‚Äù se muestra correctamente, pero la tabla aparece vac√≠a, aunque tengamos registros capturados. Esto es porque, aunque la tabla tiene todos los elementos para almacenar y mostrar datos, no tenemos manera de comunicarnos con el componente para enviar o recibir datos.
    </p>

    <h2>Paso 3: Pasar datos al componente utilizando @Input()</h2>

    <div class="row">
        <div class="6u 12u$(small)">
            <p>
                Para pasar datos de un componente a otro, en este caso, desde el componente ‚Äúregistro‚Äù hacia ‚Äútabla-registros‚Äù necesitamos agregar una propiedad al componente con el decorador @Input().
            </p>

            <p>
                Modifica la propiedad ‚Äúregistros‚Äù e inserta el siguiente c√≥digo en tabla-registros.component.ts:
            </p>
        </div>
        <div class="6u 12u$(small)">
            <pre><code>// registros = &#91;&#93; as MedicionGlucosa&#91;&#93;;
_registros = &#91;&#93; as MedicionGlucosa&#91;&#93;;

@Input()
set registros(value: MedicionGlucosa&#91;&#93;) &#123;
    this._registros = value;
    this.dataSource.data = this._registros;
&#125;
</code></pre>
        </div>
    </div>


    <p>
        Lo primero que hacemos es cambiar el nombre del arreglo de mediciones en la tabla de ‚Äúregistros‚Äù a ‚Äú_registros‚Äù. Esto es porque estamos agregando una nueva propiedad con el nombre ‚Äúregistros‚Äù. El decorador @Input() indica que el valor de esta propiedad puede asignarse desde otro componente. La manera m√°s sencilla de utilizar @Input() es la siguiente:
    </p>

    <pre><code>@Input() registros: MedicionGlucosa[] = [];</code></pre>

    <p>Sin embargo, en este caso necesitamos ejecutar algunas operaciones cuando el valor de la propiedad ‚Äúregistros‚Äù cambia:</p>

    <div class="row">
        <div class="6u 12u$(small)">
            <ol>
                <li>Primero, tomamos el valor recibido ‚Äúvalue‚Äù y lo guardamos en el arreglo ‚Äú_registros‚Äù.</li>
                <li>Actualiza la fuente de datos de la tabla de angular material (mat-table).</li>
            </ol>
        </div>
        <div class="6u 12u$(small)">
            <span class="image fit">
                <a href="/assets/images/blog/GLTrack3/02-Input.png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/02-Input.png" /></a>
            </span>
        </div>
    </div>

    <p>
        Ahora que tenemos una forma de recibir datos, agrega el siguiente atributo al componente ‚Äútabla-registros‚Äù en "registro.component.html":
    </p>

    <p style="text-align:center !important;">
        <span class="image">
            <a href="/assets/images/blog/GLTrack3/03-PassDataToInput.png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/03-PassDataToInput.png" /></a>
        </span>
    </p>

    <div class="row">
        <div class="6u 12u$(small)">
            <p>
                De esta manera, estamos indicando que el contenido de la propiedad ‚Äúregistros‚Äù del componente ‚Äúregistro.component‚Äù va a insertarse a la propiedad de entrada ‚Äú[registros]‚Äù del componente ‚Äútabla-registros‚Äù.
            </p>

            <p>
                Ahora podemos observar que la tabla que ahora existe dentro del componente ‚Äútabla-registros‚Äù est√° mostrando los datos que recibe desde el componente ‚Äúregistro‚Äù.
            </p>
        </div>
        <div class="6u 12u$(small)">
            <span class="image fit">
                <a href="/assets/images/blog/GLTrack3/04-DataInputWorks.png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/04-DataInputWorks.png" /></a>
            </span>
        </div>
    </div>

    <h2>Paso 4: Escuchar eventos de un componente utilizando EventEmmiter&lt;T&gt;</h2>

    <div class="row">
        <div class="6u 12u$(small)">
            <p>
                Aunque el componente ‚Äútabla-registros‚Äù puede recibir datos. Al hacer click en el bot√≥n para eliminar un registro, podemos observar que, en lugar de eliminar el registro, la consola del navegador arroja un error:
            </p>
            <span class="image fit">
                <a href="/assets/images/blog/GLTrack3/05-Error.png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/05-Error.png" /></a>
            </span>

        </div>
        <div class="6u 12u$(small)">

            <p>
                Esto sucede porque el bot√≥n eliminar intenta ejecutar la funci√≥n ‚ÄúEliminar()‚Äù cuando el usuario hace click y esta funci√≥n no existe todav√≠a en el componente:
            </p>
            <span class="image fit">
                <a href="/assets/images/blog/GLTrack3/06-Eliminar.png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/06-Eliminar.png" /></a>
            </span>

            <p>
                Para solucionar esto, crea la funci√≥n ‚ÄúEliminar()‚Äù en tabla-registros.component.ts agregando el siguiente c√≥digo:
            </p>
        </div>
    </div>

    <div class="row">
        <div class="6u 12u$(small)">
            <p>
                Primero estamos creando una propiedad de tipo EventEmmiter&lt;string&gt; y decor√°ndola con ‚Äú@Output()‚Äù. Despu√©s, en la funci√≥n ‚ÄúEliminar()‚Äù estamos recibiendo como par√°metro el Id del registro a eliminar y emitiendo el evento ‚ÄúitemDeleted‚Äù con el Id recibido.
            </p>
        </div>
        <div class="6u 12u$(small)">
            <pre><code>export class TablaRegistrosComponent implements OnInit &#123;
    ...
    @Output() itemDeleted = new EventEmitter&lt;string&gt;();
    ...
    Eliminar(id: string) &#123;
        this.itemDeleted.emit(id);
    &#125;
&#125;
</code></pre>
        </div>
    </div>
    <p>
        Anteriormente, el c√≥digo para eliminar un registro estaba dentro de la funci√≥n Eliminar, sin embargo, el componente ‚Äútabla-registros‚Äù tiene como √∫nica responsabilidad mostrar datos en la pantalla y notificar a otros componentes acerca de las interacciones del usuario, por ejemplo, cuando el usuario hace click en el bot√≥n eliminar.
    </p>

    <h3>@Output()</h3>
    <p>
        El decorador ‚Äú@Output()‚Äù indica que podemos leer el valor de la propiedad desde otro componente, de una manera muy similar a como lo hacemos con el decorador ‚Äú@Input()‚Äù.
    </p>

    <h3>EventEmmiter&lt;T&gt;</h3>

    <div class="row">
        <div class="7u 12u$(small)">
            <p>
                EventEmmiter es una clase incluida en Angular que se usa en propiedades con el decorador ‚Äú@Output()‚Äù para emitir eventos personalizados a los que podemos suscribirnos. ‚Äú&lt;T&gt;‚Äù indica que al crear un EventEmmiter podemos configurar el tipo de dato que va a incluir el evento. En este caso estamos configurando el evento para contener un string.
            </p>
        </div>
        <div class="5u 12u$(small)">
            <span class="image fit">
                <a href="/assets/images/blog/GLTrack3/07-EventEmmiter.png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/07-EventEmmiter.png" /></a>
            </span>
        </div>
    </div>

    <div class="row">
        <div class="6u 12u$(small)">
            <span class="image fit">
                <a href="/assets/images/blog/GLTrack3/08-ListenToOutput.png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/08-ListenToOutput.png" /></a>
            </span>
        </div>
        <div class="6u 12u$(small)">
            <p>
                Ahora que tenemos listo el EventEmmiter, podemos suscribirnos al evento itemDeleted para ejecutar alguna funci√≥n cuando sea invocado. Agrega el siguiente atributo a ‚Äúapp-tabla-registros‚Äù en registro.component.html:
            </p>
        </div>
    </div>

    <p>
        De esta manera, el componente ‚Äúregistro.component‚Äù queda suscrito al evento, y cuando el usuario haga click en el bot√≥n eliminar, el componente ‚Äútabla-registros‚Äù dispara el evento ‚ÄúitemDeleted‚Äù y entonces el componente ‚Äúregistro.component‚Äù ejecuta la funci√≥n ‚ÄúEliminar()‚Äù.
    </p>

    <p style="text-align:center !important;">
        <span class="image">
            <a href="/assets/images/blog/GLTrack3/09-EventChain.png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/09-EventChain.png" /></a>
        </span>
    </p>

    <p>
        <ol>
            <li>Cuando el usuario hace click en el bot√≥n para eliminar un registro, el componente ‚Äútabla-registros‚Äù ejecuta la funci√≥n ‚ÄúEliminar()‚Äù.</li>
            <li>La funci√≥n ‚ÄúEliminar()‚Äù en ‚Äútabla-registros.component.ts‚Äù emite el evento ‚ÄúitemDeleted‚Äù que contiene el Id del registro a eliminar.</li>
            <li>El componente ‚Äúregistro.component‚Äù est√° suscrito al evento, y cuando el evento se emite, ejecuta la funci√≥n ‚ÄúEliminar()‚Äù pasando como par√°metro el Id del registro a eliminar.</li>
            <li>La funci√≥n ‚ÄúEliminar()‚Äù en ‚Äúregistro.component.ts‚Äù se encarga de recibir el Id del registro a eliminar y llama al servicio encargado del almacenamiento de datos para que sea eliminado.</li>
        </ol>
    </p>

    <h2>Paso 5: Reutilizar el componente ‚Äútabla-registros‚Äù</h2>
    <div class="row">
        <div class="6u 12u$(small)">
            <p>
                Ahora que tenemos un componente independiente y reutilizable, podemos insertar la tabla de registros en la p√°gina principal de la aplicaci√≥n. Agrega el componente al dashboard con el siguiente c√≥digo en dashboard.component.html:
            </p>
        </div>
        <div class="6u 12u$(small)">
            <pre><code>...
&lt;mat&#45;card&gt;
    &lt;app&#45;tabla&#45;registros&gt;&lt;/app&#45;tabla&#45;registros&gt;
&lt;/mat&#45;card&gt;</code></pre>
        </div>
    </div>


    <p>
        La tabla se muestra correctamente, pero de nuevo nos encontramos con que no tiene datos para mostrar. Esto es porque el componente ‚Äútabla-registros‚Äù necesita recibir los datos a trav√©s del atributo de entrada ‚Äú[registros]‚Äù.
    </p>
    <p>
        Ahora debemos actualizar ‚Äúdashboard.component.ts‚Äù para que recupere los datos y los pase a la tabla:
    </p>

    <pre><code>...
export class DashboardComponent implements OnInit &#123;
registros = &#91;&#93; as MedicionGlucosa&#91;&#93;;

    constructor(private mediciones: MedicionesService) &#123;
    &#125;

    ngOnInit() &#123;
        this.registros = this.mediciones.GetAll();
    &#125;
&#125;
</code></pre>

    <p>
        Ahora el componente tiene una propiedad ‚Äúregistros‚Äù que contiene los registros capturados por el usuario.
    </p>

    <p>
        Utilizando Dependency Injection de Angular, en el constructor se est√° inyectando el servicio ‚ÄúMedicionesService‚Äù que se encarga de leer y escribir los registros de mediciones. De esta manera, Angular se encarga de que una instancia del servicio est√© disponible en el componente.
    </p>

    <p>
        Despu√©s, en la funci√≥n ‚ÄúngOnInit()‚Äù indicamos que una vez que el componente se cargue, recupere los registros de mediciones y los guarde en la propiedad ‚Äúregistros‚Äù.
    </p>

    <p>
        Por √∫ltimo, necesitamos pasar los registros al componente ‚Äútabla-registros‚Äù utilizando el atributo de entrada ‚Äú[registros]‚Äù. Actualiza ‚Äúdashboard.component.html‚Äù:
    </p>

    <div class="row">
        <div class="8u 12u$(small)">
            <p>
                Ahora la tabla de registros est√° disponible tambi√©n en la p√°gina principal reutilizando el componente ‚Äútabla-registros‚Äù sin la necesidad de tener c√≥digo duplicado. De esta manera la aplicaci√≥n es m√°s f√°cil de actualizar y mantener.
            </p>
        </div>
        <div class="4u 12u$(small)">
            <span class="image fit">
                <a href="/assets/images/blog/GLTrack3/10-DashboardTableCode.png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/10-DashboardTableCode.png" /></a>
            </span>
        </div>
    </div>

    <h3>Nuevo problema</h3>

    <div class="row">
        <div class="4u 12u$(small)">
            <span class="image fit">
                <a href="/assets/images/blog/GLTrack3/11-DashboardTableView.png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/11-DashboardTableView.png" /></a>
            </span>
        </div>
        <div class="8u 12u$(small)">
            <p>
                Ahora tenemos un nuevo problema. Supongamos que, por seguridad, el usuario debe poder eliminar capturas de mediciones desde la p√°gina de registro, pero no desde la p√°gina principal de la aplicaci√≥n.
            </p>
            <p>
                Necesitamos actualizar el componente ‚Äútabla-registros‚Äù para que podamos configurar si los botones para eliminar registros est√°n disponibles en ciertos casos.
            </p>
        </div>
    </div>

    <p>
        Para esto, necesitamos hacer algunas modificaciones en ‚Äútabla-registros.component.ts‚Äù:
    </p>

    <pre><code>...
export class TablaRegistrosComponent implements OnInit &#123;
    ‚Ä¶
    @Input() permitirEliminar = true;
    ‚Ä¶
    // displayedColumns: string&#91;&#93; = &#91;'fecha', 'nivel', 'comida', 'antesDespues', 'actions'&#93;;
    ‚Ä¶
    GetDisplayerColumns() &#123;
        const displayedColumns: string&#91;&#93; = &#91;'fecha', 'nivel', 'comida', 'antesDespues'&#93;;
        if (this.permitirEliminar) &#123;
            displayedColumns.push('actions');
        &#125;

        return displayedColumns;
    &#125;
&#125;
</code></pre>

    <p>
        Estas modificaciones consisten en lo siguiente:
    </p>

    <p>
        <ol>
            <li>Agregamos una nueva propiedad de entrada ‚ÄúpermitirEliminar‚Äù, con un valor verdadero (‚Äútrue‚Äù) por default.</li>
            <li>Eliminamos la propiedad ‚ÄúdisplayedColumns‚Äù que guardaba un arreglo con los nombres de las columnas que se muestran en la tabla.</li>
            <li>
                Creamos una funci√≥n nueva ‚ÄúGetDisplayedColumns()‚Äù que tiene como valor de retorno un arreglo con los nombres de las columnas que se mostrar√°n en la tabla. Esta funci√≥n eval√∫a el valor de la propiedad ‚ÄúpermitirEliminar‚Äù y si es verdadero entonces agrega la columna ‚Äúactions‚Äù que es la que contiene el bot√≥n para eliminar registros.
            </li>
        </ol>
    </p>

    <p>
        Ahora necesitamos actualizar ‚Äútabla-registros.component.html‚Äù para que lea la lista de columnas desde la funci√≥n ‚ÄúGetDisplayedColumns()‚Äù que acabamos de crear:
    </p>

    <p style="text-align:center !important;">
        <span class="image">
            <a href="/assets/images/blog/GLTrack3/12-GetDisplayedColumns().png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/12-GetDisplayedColumns().png" /></a>
        </span>
    </p>

    <p>
        De esta manera, el componente ‚Äútabla-registros‚Äù muestra los botones para eliminar por default, pero ahora podemos configurarlo para ocultarlos si es necesario.
    </p>

    <p>
        Para ocultar los botones en la pantalla principal de la aplicaci√≥n, agrega el atributo de entrada ‚ÄúpermitirEliminar‚Äù en ‚Äúdashboard.component.html‚Äù:
    </p>

    <p style="text-align:center !important;">
        <span class="image">
            <a href="/assets/images/blog/GLTrack3/13-PermitirEliminar.png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/13-PermitirEliminar.png" /></a>
        </span>
    </p>

    <p>
        De esta manera, evitamos que la tabla muestre los botones para eliminar registros en el dashboard de la aplicaci√≥n.
    </p>

    <p style="text-align:center !important;">
        <span class="image">
            <a href="/assets/images/blog/GLTrack3/14-NoDeleteButton.png" target="_blank"><img alt="" src="/assets/images/blog/GLTrack3/14-NoDeleteButton.png" /></a>
        </span>
    </p>

    <h2>Conclusi√≥n</h2>

    <p>
        En este post continuamos construyendo GLTrack, una aplicaci√≥n para registro de mediciones de glucosa en la sangre para pacientes de diabetes.
    </p>
    <p>
        Para evitar tener c√≥digo duplicado en la aplicaci√≥n, creamos un componente reutilizable para mostrar la tabla de registros en la p√°gina principal y en la p√°gina de registros de la aplicaci√≥n.
    </p>
    <p>
        Utilizamos los decoradores ‚Äú@Input()‚Äù y ‚Äú@Output()‚Äù as√≠ como EventEmmiter&lt;T&gt; para interactuar entre componentes de angular y pasar datos de entrada y salida.
    </p>
    <p>
        Tambi√©n reutilizamos servicios de angular en diferentes componentes con Dependency Injection de Angular 8.
    </p>
    <p>
        En el siguiente post, continuaremos trabajando en el Dashboard de la aplicaci√≥n, para mostrar datos relevantes para el usuario acerca de sus mediciones de glucosa a trav√©s de graficas que muestren los datos capturados en la aplicaci√≥n de manera visual.
    </p>

    <p>El c√≥digo fuente completo de la aplicaci√≥n de ejemplo puedes encontrarlo en GitHub, en
        <a href="https://github.com/RCKSTR1/GLTrack3" target="_blank">https://github.com/RCKSTR1/GLTrack3</a>
        o si prefieres, puedes clonar el repositorio directo en https://github.com/RCKSTR1/GLTrack3.git
    </p>
    <p>
        Si tuviste alg√∫n problema o duda al seguir los pasos, o si tienes alguna pregunta acerca de este post, cont√°ctame en Twitter, Facebook o LinkedIn.
    </p>

    <p>
        <strong>Es cu√°nto.</strong>
    </p>

    <h2>Fuentes</h2>
    <ul>
        <li>Documentaci√≥n de Angular. "Propiedades de @Input() y @Output()".
            <a href="https://angular.io/guide/template-syntax#input-and-output-properties" target="_blank">https://angular.io/guide/template-syntax#input-and-output-properties</a>
        </li>
        <li>Documentaci√≥n de Angular. "EventEmitter".
            <a href="https://angular.io/api/core/EventEmitter#eventemitter" target="_blank">https://angular.io/api/core/EventEmitter#eventemitter</a>
        </li>
    </ul>
</div>
:ET